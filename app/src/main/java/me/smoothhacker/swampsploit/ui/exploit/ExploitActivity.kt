package me.smoothhacker.swampsploit.ui.exploit

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.*
import androidx.navigation.ui.AppBarConfiguration
import me.smoothhacker.swampsploit.databinding.ActivityExploitBinding
import me.smoothhacker.swampsploit.utils.ExploitContext

enum class SelectedExploit {
    PROFTPD,
    NETATALK
}

class ExploitActivity : AppCompatActivity() {

    private lateinit var appBarConfiguration: AppBarConfiguration
    private lateinit var binding: ActivityExploitBinding
    private lateinit var ctx: ExploitContext

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        ctx = ExploitContext(dataDir.toPath().toString())
        ctx.create()

        binding = ActivityExploitBinding.inflate(layoutInflater)
        setContentView(binding.root)
        setSupportActionBar(binding.exploitToolbar)

        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        appBarConfiguration = AppBarConfiguration(setOf(me.smoothhacker.swampsploit.R.id.nav_proftpd, me.smoothhacker.swampsploit.R.id.nav_netatalk))

        val selectedExploit = intent.getStringExtra("selectedExploit")
        ctx.save()

        if (selectedExploit.equals("Proftpd")){
            // launch proftpd fragment
            if (selectedExploit != null) {
                navigateToExploit(selectedExploit)
            }

        }

        if (selectedExploit.equals("Netatalk")){
            // launch netatalk fragment
            if (selectedExploit != null) {
                navigateToExploit(selectedExploit)
            }

        }
    }

    override fun onDestroy() {
        super.onDestroy()
        ctx.save()
    }
    fun navigateToExploit(exploitName: String) {
        var frag: Fragment? = null
        val fragTrans: FragmentTransaction = supportFragmentManager.beginTransaction()

        if (exploitName == "Proftpd") {
            frag = ProftpdFragment()
        }
        else {
            frag = NetatalkFragment()
        }

        fragTrans.replace(me.smoothhacker.swampsploit.R.id.fragment_container, frag)
        fragTrans.addToBackStack(null)
        fragTrans.commit()
    }
}
