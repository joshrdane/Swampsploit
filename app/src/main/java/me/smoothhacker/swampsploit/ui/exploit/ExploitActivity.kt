package me.smoothhacker.swampsploit.ui.exploit

import android.os.Bundle
import android.os.Looper
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import kotlinx.coroutines.*
import me.smoothhacker.swampsploit.databinding.ActivityExploitBinding
import me.smoothhacker.swampsploit.exploit.ProFTPD
import me.smoothhacker.swampsploit.utils.ExploitContext
import java.io.File

class ExploitActivity : AppCompatActivity() {

    private lateinit var binding: ActivityExploitBinding
    private lateinit var ctx: ExploitContext

    @OptIn(DelicateCoroutinesApi::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        ctx = ExploitContext(dataDir)

        binding = ActivityExploitBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.ipAddressInput.setText(ctx.getHost(0))
        binding.portNumberInput.setText(ctx.getPort())
        binding.timeoutInput.setText(ctx.getTimeout())
        binding.tempPathInput.setText("/tmp")
        binding.sitePathInput.setText("/var/www/html")

        binding.exploitButton.setOnClickListener {
            val exploit = ProFTPD(ctx)
            Thread {
                Log.w("proftpd", "Hello")
                val result = when (exploit.exploit()) {  true-> "Success!" false -> "Failed" }
                Log.w("proftpd","result: $result")
                this.runOnUiThread { Toast.makeText(this, result, Toast.LENGTH_SHORT).show() }
            }.start()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        ctx.save()
    }
}