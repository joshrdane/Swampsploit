package me.smoothhacker.swampsploit.utils

import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import me.smoothhacker.swampsploit.exploit.Payload
import java.io.File

object ExploitContextSerializer : KSerializer<ExploitContext> {
    override val descriptor: SerialDescriptor
        get() = TODO("Not yet implemented")

    override fun deserialize(decoder: Decoder): ExploitContext {
        TODO("Not yet implemented")
    }

    override fun serialize(encoder: Encoder, value: ExploitContext) {
        TODO("Not yet implemented")
    }
}

@Serializable(with = ExploitContextSerializer::class)
class ExploitContext(dataDir: File) {
    private val dataDir: File = dataDir
    private val hostList: ArrayList<String> = ArrayList()
    private var targetPort: Int = 0x1337
    private var timeout: Int = 0
    private var selectedPayload: Payload = Payload(byteArrayOf())
    private var log: ArrayList<String> = ArrayList()

    init {
        // Read from context files
        val hostsListFile = File(this.dataDir, "saved_context.dat")
        hostList.add("")
    }

    fun save() {
        val hostsListFile = File(this.dataDir, "saved_context.dat")
        hostsListFile.bufferedWriter().use { out ->
            hostList.forEach {
                out.write("${it}\n")
            }
        }
    }

    fun getHost(idx: Int): String {
        return this.hostList[idx]
    }

    fun getHost(): String {
        return this.hostList.last()
    }

    fun getPort(): String {
        return this.targetPort.toString()
    }

    fun getTimeout(): String {
        return this.timeout.toString()
    }

    fun getPayload(): Payload {
        return this.selectedPayload
    }

    fun setPort(newVal: Int) {
        this.targetPort = newVal
    }

    fun setTimeout(newVal: Int) {
        this.timeout = newVal
    }

    fun setPayload(newPayload: Payload) {
        this.selectedPayload = newPayload
    }

    fun addHost(newHost: String) {
        this.hostList.add(newHost)
    }

    fun getLog(): List<String> {
        return this.log
    }

    fun log(message: String) {
        this.log.add(message)
    }

    fun clearLog() {
        this.log.clear()
    }
}