package me.smoothhacker.swampsploit.utils

import me.smoothhacker.swampsploit.exploit.Payload
import java.io.File
import java.io.Serializable

class ExploitContext(dataDir: File): Serializable {
    private val dataDir: File = dataDir
    private val hostList: ArrayList<String> = ArrayList()
    private var targetPort: Int = 0x1337
    private var timeout: Int = 0
    private var selectedPayload: Payload = Payload(byteArrayOf())

    init {
        // Read from context files
        val hostsListFile = File(this.dataDir, "saved_context.dat")
        hostList.add("")
        if (hostsListFile.exists()) {
            hostsListFile.bufferedReader().use { out ->
                //targetPort = Integer.parseInt(out.readLine())
                //timeout = Integer.parseInt(out.readLine())
                //val hostCount = Integer.parseInt(out.readLine())
//                for (i in 1..hostCount) {
//                    hostList.add(out.readLine())
//                }
            }
        }
    }

    fun save() {
        val hostsListFile = File(this.dataDir, "saved_context.dat")
        hostsListFile.bufferedWriter().use { out ->
//            out.write(targetPort)
//            out.write(timeout)
//            out.write(hostList.size)
            hostList.forEach {
                out.write("${it}\n")
            }
        }
    }

    fun getHost(idx: Int): String {
        return this.hostList[idx]
    }

    fun getHost(): String {
        return this.hostList.last()
    }

    fun getPort(): String {
        return this.targetPort.toString()
    }

    fun getTimeout(): String {
        return this.timeout.toString()
    }

    fun getPayload(): Payload {
        return this.selectedPayload
    }

    fun setPort(newVal: Int) {
        this.targetPort = newVal
    }

    fun setTimeout(newVal: Int) {
        this.timeout = newVal
    }

    fun setPayload(newPayload: Payload) {
        this.selectedPayload = newPayload
    }

    fun addHost(newHost: String) {
        this.hostList.add(newHost)
    }
}