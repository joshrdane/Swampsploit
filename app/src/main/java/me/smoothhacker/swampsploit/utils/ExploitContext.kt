package me.smoothhacker.swampsploit.utils

import android.util.Log
import kotlinx.serialization.*
import kotlinx.serialization.cbor.Cbor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.buildClassSerialDescriptor
import kotlinx.serialization.descriptors.listSerialDescriptor
import kotlinx.serialization.descriptors.serialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import me.smoothhacker.swampsploit.exploit.Payload
import me.smoothhacker.swampsploit.ui.exploit.SelectedExploit
import java.io.File

object ExploitContextSerializer : KSerializer<ExploitContext> {
    @OptIn(ExperimentalSerializationApi::class)
    override val descriptor: SerialDescriptor = buildClassSerialDescriptor("ExploitContext") {
        element("dataDir", serialDescriptor<String>())
        element("hostList", listSerialDescriptor<String>())
        element("targetPort", serialDescriptor<Int>())
        element("timeout", serialDescriptor<Int>())
        element("selectedPayload", serialDescriptor<Payload>())
    }
    override fun deserialize(decoder: Decoder): ExploitContext {
        val dataDir = decoder.decodeString()
        val newCtx = ExploitContext(dataDir)
        newCtx.setPort(decoder.decodeInt())
        newCtx.setTimeout(decoder.decodeInt())

        val listSize = decoder.decodeInt()
        for (i in 0 until listSize) {
            newCtx.addHost(decoder.decodeString())
        }
        return newCtx
    }

    override fun serialize(encoder: Encoder, value: ExploitContext) {
        encoder.encodeString(value.getDataDir())
        encoder.encodeInt(value.getPort().toInt())
        encoder.encodeInt(value.getTimeout().toInt())
        encoder.encodeInt(value.getHostListSize())
        for (i in 0 until value.getHostListSize()) {
            encoder.encodeString(value.getHost(i))
        }
    }
}

@Serializable(with = ExploitContextSerializer::class)
class ExploitContext(private val dataDir: String) {
    private var hostList: ArrayList<String> = ArrayList()
    private var targetPort: Int = 0x1337
    private var timeout: Int = 0
    private var selectedPayload: Payload = Payload(byteArrayOf())
    private var selectedExploit: SelectedExploit = SelectedExploit.PROFTPD
    private var log: ArrayList<String> = ArrayList()

    @OptIn(ExperimentalSerializationApi::class)
    fun save() {
        val hostsListFile = File(this.dataDir, "saved_context.dat")
        val savedCtx = Cbor.encodeToByteArray(this)
        hostsListFile.writeBytes(savedCtx)
    }

    fun create() {
        val hostsListFile = File(this.dataDir, "saved_context.dat")
        if(!hostsListFile.exists())  {
            hostsListFile.createNewFile()
            return
        }
        try {
            val savedCtx: ExploitContext = Cbor.decodeFromByteArray(hostsListFile.readBytes())
            this.hostList = savedCtx.hostList
            this.timeout = savedCtx.timeout
            this.targetPort = savedCtx.targetPort
            this.selectedPayload = savedCtx.selectedPayload
            this.selectedExploit = savedCtx.selectedExploit
        } catch (e: Throwable) {
            Log.e("Swampsploit", "expoitCtx failed to deserialize")
        }
    }

    fun getHostListSize(): Int {
        return this.hostList.size
    }

    fun getDataDir(): String {
        return this.dataDir
    }

    fun getHost(idx: Int): String {
        return if (this.hostList.size == 0) "192.168.1.1"
        else this.hostList[idx]
    }

    fun getHost(): String {
        return this.hostList.last()
    }

    fun getHostList(): ArrayList<String> {
        return this.hostList
    }

    fun getPort(): String {
        return this.targetPort.toString()
    }

    fun getTimeout(): String {
        return this.timeout.toString()
    }

    fun getPayload(): Payload {
        return this.selectedPayload
    }

    fun setPort(newVal: Int) {
        this.targetPort = newVal
    }

    fun setTimeout(newVal: Int) {
        this.timeout = newVal
    }

    fun setPayload(newPayload: Payload) {
        this.selectedPayload = newPayload
    }

    fun addHost(newHost: String) {
        this.hostList.add(newHost)
    }

    fun setExploit(newExploit: SelectedExploit) {
        this.selectedExploit = newExploit
    }

    fun getExploit(): SelectedExploit {
        return this.selectedExploit
    }

    fun getLog(): List<String> {
        return this.log
    }

    fun log(message: String) {
        this.log.add(message)
    }

    fun clearLog() {
        this.log.clear()
    }
}
