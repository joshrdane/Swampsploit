package me.smoothhacker.swampsploit.utils

import me.smoothhacker.swampsploit.exploit.Payload
import java.io.File
import java.io.Serializable

class ExploitContext(dataDir: File): Serializable {
    private val dataDir: File = dataDir
    private val hostList: ArrayList<String> = ArrayList()
    private var targetPort: Int = 22
    private var timeout: Int = 0
    private var selectedPayload: Payload = Payload(byteArrayOf())

    init {
        // Read from context files
        val hostsListFile = File(this.dataDir, "hosts_list.dat")
        if (hostsListFile.exists())
            hostsListFile.forEachLine { hostList.add(it) }
    }

    fun save() {
        val hostsListFile = File(this.dataDir, "hosts_list.dat")
        hostsListFile.bufferedWriter().use { out ->
            hostList.forEach {
                out.write("${it}\n")
            }
        }
    }

    fun getHost(idx: Int): String {
        return this.hostList[idx]
    }

    fun getPort(): Int {
        return this.targetPort
    }

    fun getTimeout(): Int {
        return this.timeout
    }

    fun getPayload(): Payload {
        return this.selectedPayload
    }

    fun setPort(newVal: Int) {
        this.targetPort = newVal
    }

    fun setTimeout(newVal: String) {
        this.timeout = newVal.toInt()
    }

    fun setPayload(newPayload: Payload) {
        this.selectedPayload = newPayload
    }
}